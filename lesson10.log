Задания на БД vk:

-- 1. Проанализировать какие запросы могут выполняться наиболее
-- часто в процессе работы приложения и добавить необходимые индексы.

ALTER TABLE `vk`.`users`
ADD INDEX `id`(`id`),
ADD INDEX `name1`(`first_name`),
ADD INDEX `name2`(`last_name`);

ALTER TABLE `vk`.`profiles`
ADD INDEX `id`(`user_id`);

ALTER TABLE `vk`.`messages`
ADD INDEX `_id`(`id`),
ADD INDEX `from_user_id`(`from_user_id`),
ADD INDEX `to_user_id`(`to_user_id`);

ALTER TABLE `vk`.`media`
ADD INDEX `user_Id`(`user_id`);

ALTER TABLE `vk`.`likes`
ADD UNIQUE INDEX `uniq`(`user_id`, `target_id`, `target_type_id`) USING HASH;

ALTER TABLE `vk`.`friendship`
ADD INDEX `friend_vs_user_id`(`uer_id`, `friend_id`);

ALTER TABLE `vk`.`communities_users`
ADD INDEX `community_group`(`community_id`, `user_id`);

-- 2. Задание на оконные функции
-- Построить запрос, который будет выводить следующие столбцы:
-- имя группы
-- среднее кочлиество пользователей в группах
-- самый молодой пользователь в группе
-- самый старший пользователь в группе
-- общее количество пользователей в группе
-- всего пользователей в системе
-- отношение в процентах (общее количество пользователей в группе / всего пользователей в системе) * 100

SELECT
	communities.id,
	communities.`name`,
	COUNT( 1 ) AS 'all_count_in_group',
	CONCAT( young_man.first_name, ' ', young_man.last_name ) AS 'young',
	CONCAT( older_man.first_name, ' ', older_man.last_name ) AS 'older',
	( SELECT COUNT( 1 ) AS 'summ' FROM users ) AS all_users,
	users_in_group.c,
	(
	users_in_group.c / ( SELECT COUNT( 1 ) AS 'summ' FROM users )) * 100
FROM
	communities
	JOIN communities_users ON communities.id = communities_users.community_id
	LEFT JOIN (
	SELECT
		id,
		user_id,
		first_name,
		last_name,
		birthday
	FROM
		(
		SELECT
			communities.id,
			communities_users.user_id,
			users.first_name,
			users.last_name,
			`profiles`.birthday,
			RANK () OVER ( PARTITION BY communities.id ORDER BY `profiles`.birthday DESC ) dest_rank
		FROM
			communities
			JOIN communities_users ON communities.id = communities_users.community_id
			JOIN users ON communities_users.user_id = users.id
			JOIN `profiles` ON communities_users.user_id = `profiles`.user_id
		) AS t
	WHERE
		t.dest_rank = 1
	) AS young_man ON young_man.id = communities.id
	LEFT JOIN (
	SELECT
		id,
		user_id,
		first_name,
		last_name,
		birthday
	FROM
		(
		SELECT
			communities.id,
			communities_users.user_id,
			users.first_name,
			users.last_name,
			`profiles`.birthday,
			RANK () OVER ( PARTITION BY communities.id ORDER BY `profiles`.birthday ASC ) dest_rank
		FROM
			communities
			JOIN communities_users ON communities.id = communities_users.community_id
			JOIN users ON communities_users.user_id = users.id
			JOIN `profiles` ON communities_users.user_id = `profiles`.user_id
		) AS t
	WHERE
		t.dest_rank = 1
	) AS older_man ON older_man.id = communities.id
	LEFT JOIN (
	SELECT
		communities.id,
		COUNT( communities_users.user_id ) AS 'c'
	FROM
		communities
		JOIN communities_users ON communities.id = communities_users.community_id
		JOIN users ON communities_users.user_id = users.id
		JOIN `profiles` ON communities_users.user_id = `profiles`.user_id
	GROUP BY
		communities.id
	) AS users_in_group ON users_in_group.id = communities.id
GROUP BY
	communities.`name`


1	and Sons	15	Damaris Barton	Dorris Koss	100	15	15,0000
5	Group	14	Samanta Abshire	Alden Nikolaus	100	14	14,0000
2	Inc	18	Ryleigh Beahan	Jennyfer Schumm	100	18	18,0000
3	LLC	19	Jarrell Weber	Ernestine Bailey	100	19	19,0000
6	Ltd	11	Giovani Gottlieb	Kathleen Deckow	100	11	11,0000
4	PLC	23	Angeline Moore	Giles Reinger	100	23	23,0000